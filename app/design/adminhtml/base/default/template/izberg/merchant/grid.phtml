<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<div class="content-header">
    <table cellspacing="0">
        <tr>
            <td style="<?php echo $this->getHeaderWidth() ?>"><?php echo $this->getHeaderHtml() ?></td>
            <td class="form-buttons"><?php echo $this->getButtonsHtml() ?></td>
        </tr>
    </table>
</div>
<div>
    <?php echo $this->getGridHtml() ?>
</div>

<script>
function ajax_loader_print(msg) {
    var loadermsg = '<p class="loader" id="loading_mask_loader"><img src="<?php echo $this->getSkinUrl('images/ajax-loader-tr.gif') ?>" alt="<?php echo Mage::helper('adminhtml')->__('Loading...') ?>"/><br/>'+ msg +'</p>';

    $('loading-mask').innerHTML = loadermsg;
}

function batch_process(parm) {
    var response = true;

    if (response === true) {
        var params = {};
        params['do'] = parm;
        new Ajax.Request('<?php echo Mage::getModel('adminhtml/url')->getUrl('izberg/adminhtml_merchant/import') ?>', {
            method: 'get',
            parameters: params,
            onCreate: function (request) {
                if (parm == 'offset0') {
                    ajax_loader_print("Importing merchants from Izberg...");
                }

            },
            onSuccess: function(transport) {
                var data = transport.responseText;
                data = data.evalJSON();
                ajax_loader_print(data.progress);
                if (data.next && data.next !== "done") {
                    batch_process(data.next);
                } else {
                    window.location.reload();
                }
            }
        });
    }
}




function batch_mass_process(parm, url, originalAjaxParams) {
    var response = true;

    if (response === true) {
        var params = {};
        params['do'] = parm;

        new Ajax.Request(url, {
            method: originalAjaxParams.method,
            parameters: $H(params).merge(originalAjaxParams.parameters),
            onCreate: function (request) {
                if (parm == 'offset0') {
                    var total = originalAjaxParams.parameters.merchant_ids.split(',').length
                    ajax_loader_print("Starting to import products from 1/" + total + " merchants");
                }
            },
            onSuccess: function(transport) {
                var data = transport.responseText;
                data = data.evalJSON();
                ajax_loader_print(data.progress);
                if (data.next && data.next !== "done") {
                    batch_mass_process(data.next, url, originalAjaxParams);
                } else {
                    window.setTimeout(function(){
                        window.location.reload();
                    });
                }
            }
        });
    }
}


// WARNING => DO NOT CHANGE THE GRI NAME
merchantsGrid_massactionJsObject.apply = function () {
    if(varienStringArray.count(this.checkedString) == 0) {
            alert(this.errorText);
            return;
        }

    var item = this.getSelectedItem();
    if(!item) {
        this.validator.validate();
        return;
    }
    this.currentItem = item;
    var fieldName = (item.field ? item.field : this.formFieldName);
    var fieldsHtml = '';

    if(this.currentItem.confirm && !window.confirm(this.currentItem.confirm)) {
        return;
    }

    this.formHiddens.update('');
    new Insertion.Bottom(this.formHiddens, this.fieldTemplate.evaluate({name: fieldName, value: this.checkedString}));
    new Insertion.Bottom(this.formHiddens, this.fieldTemplate.evaluate({name: 'massaction_prepare_key', value: fieldName}));

    if(!this.validator.validate()) {
        return;
    }
    if(this.useAjax && item.url) {
        if (item.id == "import_product") {
          batch_mass_process("offset0", item.url, {
            'method': 'post',
            'parameters': this.form.serialize(true),
            'onComplete': this.onMassactionComplete.bind(this)
            })
        } else {
          new Ajax.Request(item.url, {
            'method': 'post',
            'parameters': this.form.serialize(true),
            'onComplete': this.onMassactionComplete.bind(this)
          });
        }

    } else if(item.url) {
        if (item.id == "import_product") {
          batch_mass_process("offset0", item.url, {
            'method': 'post',
            'parameters': this.form.serialize(true),
            'onComplete': this.onMassactionComplete.bind(this)
            })
        } else {
          this.form.action = item.url;
          this.form.submit();
        }
    }
}

</script>
